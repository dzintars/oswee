load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary", "npm_package_bin")
load("@io_bazel_rules_sass//:defs.bzl", "multi_sass_binary")
load("@npm//@bazel/typescript:index.bzl", "ts_config")
load("@npm//webpack:index.bzl", "webpack")
load("@npm//webpack-dev-server:index.bzl", "webpack_dev_server")
load("//tools:ts_library.bzl", "ts_library")

package(default_visibility = ["//visibility:public"])

# filegroup(
#     name = "assets",
#     srcs = glob([
#         "src/**/*.html",
#         "src/public/**/*.*",
#         "src/assets/**/*.*",
#     ]),
# )

filegroup(
    name = "public",
    srcs = glob([
        "src/template.html",
        "src/assets/favicon.ico",
        ])
    )

# multi_sass_binary(
#     name = "sass",
#     srcs = glob([
#         "src/scss/**/*.scss"
#         ]),
#     output_style = "expanded",
#     sourcemap = False,
# )

ts_library(
  name = "example",
  srcs = glob(["**/*.ts", "**/*.tsx"], exclude = ["webpack.*.ts"]),
  data = [
      "//apps/front/src/scss",
      ],
  deps = [
      "@oswee//libs/elements/oswee/avatar",
      "@oswee//libs/router:compile",
      "@npm//@types/node",
      "@npm//lit-element",
      "@npm//lit-html",
        "@npm//history",
  ]
)
# The "bundler" is thought of as an application, and has it's own deps.
# This effectively webpack + webpack.config.js.
ts_library(
    name = "config",
    srcs = ["webpack.dev.ts"],
    deps = [
        "//tools/webpack",
        "@npm//@types/node",
        "@npm//@types/webpack",
        "@npm//css-loader",
        "@npm//style-loader",
        "@npm//umd-compat-loader",
        "@npm//webpack",
        "@npm//@types/html-webpack-plugin",
        "@npm//html-webpack-plugin",
    ],
)

nodejs_binary(
    name = "devserver",
    data = [
        ":public",
        ":example",
        ":config",
        "src/assets/favicon.ico",
        "//tools/webpack",
    ],
    entry_point = "//tools/webpack:devserver.ts",
    tags = [
        "ibazel_notify_changes",
    ],
    templated_args = [
        "--output=./[hash].bundle.js",
        "--entry=oswee/apps/front/src/index",
        "--mode=development",
        "--config=oswee/apps/front/webpack.dev.js"
    ],
)

# ts_library(
#     name = "app",
#     srcs = glob(
#         [
#             "src/**/*.ts",
#         ],
#         exclude = ["webpack.*.ts"],
#     ),
#     data = [
#         # ":sass",
#         "@oswee//apps/front/src/scss",
#         "@oswee//libs/elements/oswee/avatar",
#       ],
#     tsconfig = ":tsconfig.json",
#     deps = [
#         "@oswee//libs/elements/oswee/avatar",
#         "@npm//@types/node",
#     ],
# )

# webpack_dev_server(
#     name = "devserver",
#     args = [
#         "--config=apps/front/webpack.dev.ts",
#         "--output=./[contenthash].bundle.js",
#         "--history-api-fallback",
#     ],
#     data = [
#         "src/template.html",
#         ":app",
#         ":assets",
#         ":sass",
#         ":webpack.dev.ts",
#         "@npm//html-webpack-plugin",
#         "@npm//webpack-cli",
#         "@oswee//libs/elements/oswee/avatar",
#     ],
#     tags = [
#         # "ibazel_notify_changes",
#     ],
# )

# webpack(
#     name = "bundler",
#     args = [
#         "--config=apps/front/webpack.dev.ts",
#         "--output=./[contenthash].bundle.js",
#     ],
#     data = [
#         ":app",
#         ":assets",
#         ":sass",
#         ":webpack.dev.ts",
#         "@oswee//apps/front/src/scss",
#         "@npm//html-webpack-plugin",
#         "@npm//webpack-cli",
#         "@oswee//libs/elements/oswee/avatar",
#     ],
# )

# npm_package_bin(
#     name = "bundle",
#     outs = [
#         "app.bundle.js",
#     ],
#     args = [
#         "--config=app/webpack.config.js",
#         "--output=$(location app.bundle.js)",
#     ],
#     data = [
#         ":webpack.config.js",
#         "@npm//css-loader",
#         "@npm//style-loader",
#     ],
#     tool = ":bundler",
# )

# ts_config(
#     name = "tsconfig_app",
#     src = "tsconfig.app.json",
#     deps = [
#         "tsconfig.json",
#     ],
# )
