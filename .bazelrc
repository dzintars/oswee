# Artifacts are typically placed in a directory called "dist"
# Be aware that this setup will still create a bazel-out symlink in
# your project directory, which you must exclude from version control and your
# editor's search path.
# Alex Eagle
# this just seemed like the common existing idiom in the community so I wanted rules_nodejs default to meet users where they are
build --symlink_prefix=dist/

build --explain ./bazel-explain.txt
build --verbose_failures --define=DEBUG=1
build --verbose_explanations
# build --worker_sandboxing

# SWC
# build --enable_runfiles

# Added this to fix com_google_protobuf protoc recompilation.
# https://docs.bazel.build/versions/main/command-line-reference.html#flag--incompatible_strict_action_env
# build --incompatible_strict_action_env
# test --incompatible_strict_action_env
# run --incompatible_strict_action_env

# build --verbose_failures
# --repository_cache for fetched externals
# --disk_cache for build artifacts

# Local cache
build --repository_cache=~/.cache/bazel-repo
fetch --repository_cache=~/.cache/bazel-repo
query --repository_cache=~/.cache/bazel-repo
build --disk_cache=~/.cache/bazel-disk

# Remote Cache
# build --remote_cache=http://build.oswee.local:8000/cache

# Remote Execution
# build --remote_executor=grpc://build.oswee.local:8980

build --color=yes
run --color=yes

# Turn on --incompatible_strict_action_env which was on by default
# in Bazel 0.21.0 but turned off again in 0.22.0. Follow
# https://github.com/bazelbuild/bazel/issues/7026 for more details.
# This flag is needed to so that the bazel cache is not invalidated
# when running bazel via `yarn bazel`.
# See https://github.com/angular/angular/issues/27514.
build --incompatible_strict_action_env
run --incompatible_strict_action_env
test --incompatible_strict_action_env
