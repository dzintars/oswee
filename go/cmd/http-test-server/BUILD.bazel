"""Http Server
"""

load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@io_bazel_rules_k8s//k8s:object.bzl", "k8s_object")
load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")
load("//defs:config.bzl", "CONTAINER_REGISTRY")

go_library(
    name = "server_lib",
    srcs = ["main.go"],
    importpath = "github.com/oswee/prime/oswee/http-server",
    visibility = ["//visibility:private"],
)

go_binary(
    name = "binary",
    embed = [":server_lib"],
    pure = "on",
    visibility = ["//visibility:private"],
)

go_image(
    name = "go_image_base",
    srcs = [
        "main.go",
    ],
    goarch = "amd64",
    goos = "linux",
    importpath = "github.com/oswee/prime/oswee/http-server",
    pure = "on",
    deps = [],
)

container_image(
    name = "container_image",
    base = ":go_image_base",
    entrypoint = ["/binary"],
    # Files are coppied at the / and so should be served from there.
    files = [
        ":binary",
        "//oswee/http-server/static",
    ],
    ports = [":80"],
)

container_push(
    name = "container_push",
    format = "Docker",
    image = ":container_image",
    registry = CONTAINER_REGISTRY,
    repository = "oswee/http-server",
    tag = "{BUILD_USER}",
)

k8s_object(
    name = "gateway",
    cluster = "minikube",
    template = "gateway.yaml",
)

k8s_object(
    name = "virtual_service",
    cluster = "minikube",
    template = "virtual-service.yaml",
)

k8s_object(
    name = "service",
    cluster = "minikube",
    template = "service.yaml",
)

k8s_deploy(
    name = "deployment",
    images = {
        "http-server:dzintars": ":container_image",
    },
    template = ":deployment.yaml",
)

k8s_objects(
    name = "all",
    objects = [
        ":deployment",
        ":service",
        ":virtual_service",
        ":gateway",
    ],
)
